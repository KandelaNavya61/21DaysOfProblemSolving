4Q) Strong Password: 

Find the minimum number of characters to add to a password (P) to ensure that P meets the following criteria:
1. Contains at least 6 characters.
2. Contains at least one digit.
3. Contains at least one lowercase character.
4. Contains at least one uppercase character.
5. Contains at least one special character (!@#$%^&*()-+).

Input Format
First and only line of input contains a string P.

Output Format
Print the minimum number of characters that has to be added to P.

Constraints
1 <= len(P) <=50
P[i] ∈ {[a-z], [A-Z], [0-9], or [!@#$%^&*()-+ ]}.
Example
Input: He!!0
Output:  1
Explanation: The given password P already contains one digit, one lowercase character, one uppercase character and one special character. However, it should also contain at least 6 characters. So we need to add 1 character to ensure it meets all the criteria.

CODE:
import java.io.*;
import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String password = sc.nextLine();
        String specialCharacter ="!@#$%^&*()-+";
        boolean hasDigit = false;
        boolean hasLowerCase = false;
        boolean hasUpperCase = false;
        boolean hasSpecialCharacter = false;
        for(char c: password.toCharArray()){
            if(Character.isDigit(c)){
                hasDigit = true;
            }else if(Character.isLowerCase(c)){
                hasLowerCase = true;
            }else if(Character.isUpperCase(c)){
                hasUpperCase = true;
            }else if(specialCharacter.indexOf(c) != -1){
                hasSpecialCharacter = true;
            }
        }
        int cnt=0;
        if(!hasDigit) cnt++;
        if(!hasLowerCase) cnt++;
        if(!hasUpperCase) cnt++;
        if(!hasSpecialCharacter) cnt++;
        int length = Math.max(0, 6-password.length());
        int res = Math.max(cnt,length);
        System.out.println(res);
    }
}
